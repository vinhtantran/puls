[{"path":"https://vinhtantran.github.io/puls/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://vinhtantran.github.io/puls/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://vinhtantran.github.io/puls/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://vinhtantran.github.io/puls/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://vinhtantran.github.io/puls/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://vinhtantran.github.io/puls/articles/puls.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Partitioning Using Local Subregions","text":"Cluster analysis (clustering) attempts group observations clusters observations within cluster similar different clusters. often used dealing question discovering structure data known group labels exist might question whether data contain groups correspond measured grouping variable. Therefore, cluster analysis considered type unsupervised learning. used many fields including statistics, machine learning, image analysis, name just . general introduction cluster analysis, see Everitt Hothorn (2011, Chapter 6). Commonly used clustering methods kk-means (MacQueen, 1967) Ward’s hierarchical clustering (Murtagh Legendre, 2014; Ward, 1963), implemented functions kmeans hclust, respectively, stats package R (R Core Team, 2019). belong group methods called polythetic clustering (MacNaughton-Smith et al., 1964) use combined information variables partition data generate groups observations similar average. Monothetic cluster analysis (Chavent, 1998; Piccarreta Billari, 2007; Sneath Sokal, 1973), hand, clustering algorithm provides hierarchical, recursive partitioning multivariate responses based binary decision rules built individual response variables. creates clusters contain shared characteristics defined rules. application clustering Arctic sea ice extent data comprising daily measurements 1978 present (Fetterer et al., 2018), faced challenge choosing one splitting variable among multiple equally qualified variables monothetic clustering applied functional data. happens similar observations small intervals time observations smooth curves. new clustering algorithm called Partitioning Using Local Subregions (PULS) provides method clustering functional data using subregion information implemented R package puls. designed complement fda fda.usc packages (Febrero-Bande Fuente, 2012; Ramsay et al., 2018) clustering functional data objects.","code":""},{"path":"https://vinhtantran.github.io/puls/articles/puls.html","id":"partitioning-using-local-subregions-puls","dir":"Articles","previous_headings":"","what":"Partitioning Using Local Subregions (PULS)","title":"Partitioning Using Local Subregions","text":"Measurements yy taken ordered index time, frequency, space thought curves functions index tt /predictors called functional data denoted y(t)y(t) (Ramsay Silverman, 2005). Functional data , possibly, high frequency observations index tt assumed generated smooth underlying process. examples data can treated functional include growth curves girls Berkeley Growth Study (Tuddenham Snyder, 1954), hydraulic gradients wetlands (Greenwood et al., 2011), daily ice extent years Arctic Sea (Fetterer et al., 2020). Clustering can useful functional data find groups curves sharing common characteristics find representative curves corresponding different modes variation data. Functional clustering requires (1) construction functional data object (2) application clustering algorithm either functional data directly distance matrix calculated functional data. R (R Core Team, 2020), Ramsay et al. (2018) created package named fda former task function metric.lp fda.usc (Febrero-Bande Fuente, 2012) designed find L2L_2 distance matrix functional data latter approach. functional data applications, pre-existing knowledge regions interest intervals time curves expected different . Partitioning using local subregions (PULS) clustering technique designed explore subregions functional data information split curves clusters. defining subregions [a1,b1],[a2,b2],…,[aR,bR][a_1, b_1], [a_2, b_2], \\ldots, [a_R, b_R], Euclidean (L2L_2) distance calculated functions yi(t)y_i(t) yj(t)y_j(t) (Febrero-Bande Fuente, 2012) using function metric.lp fda.usc provide dR(yi,yj)=∫arbr[yi(t)–yj(t)]2dtd_R(y_i, y_j) = \\sqrt{\\int_{a_r}^{b_r} [y_i(t) – y_j(t)]^2 dt} obtain dissimilarity matrix subregion, r=1,…,Rr = 1, \\ldots, R. Adapting idea monothetic clustering algorithm, subregion separately considered splitting candidate next 2-group partitioning, using commonly used clustering techniques kk-means (MacQueen, 1967), Ward’s method (Ward, 1963), partitioning around medoids (PAM, Kaufman Rousseeuw, 1990). inertia-like criterion used global criterion selecting split. Among KK candidate splits, one subregion, one largest decrease inertia chosen best split. algorithm recursively applied resulting sub-partitions specified number partitions reached stopping rule met. PULS algorithm inspired monothetic clustering shares many features inertia global criterion, recursive bi-partitioning method, stopping rules. However, idea applications PULS different enough store separate R package, named puls. Indeed, puls borrows many private functions monoClust (Tran et al., 2020) splitting rule tree, recursively checking best splitting subregion, tree-based displays results, etc. example usage main function package, PULS, Arctic ice extent data subregions defined months follows. Four cluster result PULS Arctic ice extent data years 1979-1986, 1989-2013. required arguments PULS fd object created applying smooth.basis function list matrix specified intervals subregions tt. arguments PULS function include: method: clustering method used partition subregions. can chosen \"pam\" (PAM method) \"ward\" (Ward’s method). distmethod: method calculating distance matrix. can either \"usc\" metric.lp fda.usc package (default) \"manual\" using inner product fine grid values two functions. labels: name entities nclusters: desired number clusters results minbucket minsplit: minimum number observations must exist node order split attempted minimum number observations allowed terminal leaf, respectively.","code":"library(fda) #> Loading required package: splines #> Loading required package: fds #> Loading required package: rainbow #> Loading required package: MASS #> Loading required package: pcaPP #> Loading required package: RCurl #> Loading required package: deSolve #>  #> Attaching package: 'fda' #> The following object is masked from 'package:graphics': #>  #>     matplot #> The following object is masked from 'package:datasets': #>  #>     gait library(puls) # Build a simple fd object from already smoothed smoothed_arctic data(smoothed_arctic) NBASIS <- 300 NORDER <- 4 y <- t(as.matrix(smoothed_arctic[, -1])) splinebasis <- create.bspline.basis(rangeval = c(1, 365),                                     nbasis = NBASIS,                                     norder = NORDER) fdParobj <- fdPar(fdobj = splinebasis,                   Lfdobj = 2,                   # No need for any more smoothing                   lambda = .000001) yfd <- smooth.basis(argvals = 1:365, y = y, fdParobj = fdParobj) Jan <- c(1, 31); Feb <- c(31, 59); Mar <- c(59, 90) Apr <- c(90, 120); May <- c(120, 151); Jun <- c(151, 181) Jul <- c(181, 212); Aug <- c(212, 243); Sep <- c(243, 273) Oct <- c(273, 304); Nov <- c(304, 334); Dec <- c(334, 365)  intervals <-   rbind(Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec)  PULS4_pam <- PULS(toclust.fd = yfd$fd, intervals = intervals,                   nclusters = 4, method = \"pam\") plot(PULS4_pam)"},{"path":"https://vinhtantran.github.io/puls/articles/puls.html","id":"constrained-version","dir":"Articles","previous_headings":"","what":"Constrained Version","title":"Partitioning Using Local Subregions","text":"data set, variables created equal. variables easier cheaper measure others. example, data set human vital information may include body fat percentage, height, weight. Height weight much easier obtain accurate measurements body fat percentage. data can partitioned using easy--measure variables results comparable using variables, can help reduce effort cost future studies new subjects placed clusters using easy cheap measure variables . PULS algorithm implemented puls packages options limit splitting candidates subset variables (case monothetic) subregions (case PULS) specifying argument spliton =. following code limits subset splitting variables summer months (August September) Arctic ice extent data. Besides benefits reducing effort cost future studies, constrained version algorithm also speeds running time, making cluster estimation faster.","code":"constrained_PULS <- PULS(yfd$fd, intervals = intervals, nclusters = 4,                           spliton = 7:9, method = \"pam\") print(constrained_PULS) #> n = 39  #>  #> Node) Split, N, Cluster Inertia, Proportion Inertia Explained,   #>       * denotes terminal node #>  #> 1) root 39 8453.2190 0.7072663    #>   2) Jul 15  885.3640 0.8431711    #>     4) Aug 8  311.7792   * #>     5) Aug 7  178.8687   * #>   3) Jul 24 1589.1780 0.7964770    #>     6) Jul 13  463.8466   * #>     7) Jul 11  371.2143   * #>  #> Note: One or more of the splits chosen had an alternative split that reduced inertia by the same amount. See \"alt\" column of \"frame\" object for details."},{"path":"https://vinhtantran.github.io/puls/articles/puls.html","id":"bibliography","dir":"Articles","previous_headings":"","what":"Bibliography","title":"Partitioning Using Local Subregions","text":"Chavent, M. (1998). “monothetic clustering method”. : Pattern Recognition Letters 19.11, pp. 989{996. issn: 01678655. . Everitt, B. T. Hothorn (2011). Introduction Applied Multivariate Analysis R. 1st ed. Springer. isbn: 1441996494. Febrero-Bande, M. M. O. de la Fuente (2012). “Statistical Computing Functional Data Analysis: R Package fda.usc”. : Journal Statistical Software 51.4, pp. 1-28. Fetterer, F., F. Knowles, W. Meier, M. Savoie, . K. Windnagel (2020). Sea Ice Index, Version 3. . https://nsidc.org/data/g02135 (visited 2020). Greenwood, M. C., R. S. Sojda, J. L. Sharp, R. G. Peck, D. O. Rosenberry (2011). “Multi-scale Clustering Functional Data Application Hydraulic Gradients Wetlands”. : Journal Data Science 9.3, pp. 399-426. Kaufman, L. P. J. Rousseeuw (1990). Finding Groups Data: Introduction Cluster Analysis. 1st ed. Wiley-Interscience, p. 368. isbn: 978-0471735786. MacNaughton-Smith, P., W. T. Williams, M. B. Dale, L. G. Mockett (1964). “Dissimilarity Analysis: new Technique Hierarchical Sub-division”. : Nature 202.4936, pp. 1034-1035. issn: 0028-0836. . MacQueen, J. (1967). methods classification analysis multivariate observations. Berkeley, Calif. Murtagh, F. P. Legendre (2014). “Ward’s Hierarchical Agglomerative Clustering Method: Algorithms Implement Ward’s Criterion?” : Journal Classification 31.3, pp. 274-295. issn: 0176-4268. Piccarreta, R. F. C. Billari (2007). “Clustering work family trajectories using divisive algorithm”. : Journal Royal Statistical Society: Series (Statistics Society) 170.4, pp. 1061-1078. issn: 0964-1998. . R Core Team (2020). R: Language Environment Statistical Computing. R Foundation Statistical Computing. Vienna, Austria. https://www.R-project.org/. Ramsay, J. O. B. W. Silverman (2005). Functional data analysis. Springer, p. 426. isbn: 9780387400808. Ramsay, J. O., H. Wickham, S. Graves, G. Hooker (2018). fda: Functional Data Analysis. R package version 2.4.8. Sneath, P. H. . R. R. Sokal (1973). Numerical taxonomy: principles practice numerical classification. W.H. Freeman, p. 573. isbn: 0716706970. Tan Tran, Brian McGuire, Mark Greenwood (2020). monoClust: Perform Monothetic Clustering Extensions Circular Data. R package version 1.2.0. https://CRAN.R-project.org/package=monoClust Tuddenham, R. D. M. M. Snyder (1954). “Physical growth California boys girls birth eighteen years.” : Publications child development. University California, Berkeley 1.2, pp. 183-364. Ward, J. H. (1963). “Hierarchical Grouping Optimize Objective Function”. : Journal American Statistical Association 58.301, pp. 236–244. issn: 0162-1459. .","code":""},{"path":"https://vinhtantran.github.io/puls/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mark Greenwood. Author. Tan Tran. Author, maintainer.","code":""},{"path":"https://vinhtantran.github.io/puls/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Greenwood M, Tran T (2025). puls: Partitioning Using Local Subregions. R package version 0.1.3, https://vinhtantran.github.io/puls/.","code":"@Manual{,   title = {puls: Partitioning Using Local Subregions},   author = {Mark Greenwood and Tan Tran},   year = {2025},   note = {R package version 0.1.3},   url = {https://vinhtantran.github.io/puls/}, }"},{"path":"https://vinhtantran.github.io/puls/index.html","id":"puls","dir":"","previous_headings":"","what":"Partitioning Using Local Subregions","title":"Partitioning Using Local Subregions","text":"Partitioning using local subregions (PULS) clustering technique designed explore subregions functional data information split curves clusters.","code":""},{"path":"https://vinhtantran.github.io/puls/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Partitioning Using Local Subregions","text":"can install released version puls CRAN : development version GitHub :","code":"install.packages(\"puls\") # install.packages(\"remotes\") remotes::install_github(\"vinhtantran/puls\")"},{"path":"https://vinhtantran.github.io/puls/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Partitioning Using Local Subregions","text":"basic example shows solve common problem: can make tree plot:  , wave plot:","code":"library(puls) library(fda) #> Loading required package: splines #> Loading required package: Matrix #> Loading required package: fds #> Loading required package: rainbow #> Loading required package: MASS #> Loading required package: pcaPP #> Loading required package: RCurl #>  #> Attaching package: 'fda' #> The following object is masked from 'package:graphics': #>  #>     matplot # Build a simple fd object from already smoothed smoothed_arctic data(smoothed_arctic) NBASIS <- 300 NORDER <- 4 y <- t(as.matrix(smoothed_arctic[, -1])) splinebasis <- create.bspline.basis(rangeval = c(1, 365),                                     nbasis = NBASIS,                                     norder = NORDER) fdParobj <- fdPar(fdobj = splinebasis,                   Lfdobj = 2,                   # No need for any more smoothing                   lambda = .000001) yfd <- smooth.basis(argvals = 1:365, y = y, fdParobj = fdParobj)  Jan <- c(1, 31); Feb <- c(31, 59); Mar <- c(59, 90) Apr <- c(90, 120); May <- c(120, 151); Jun <- c(151, 181) Jul <- c(181, 212); Aug <- c(212, 243); Sep <- c(243, 273) Oct <- c(273, 304); Nov <- c(304, 334); Dec <- c(334, 365)  intervals <-   rbind(Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec)  PULS4_pam <- PULS(toclust.fd = yfd$fd, intervals = intervals,                   nclusters = 4, method = \"pam\") PULS4_pam #> n = 39  #>  #> Node) Split, N, Cluster Inertia, Proportion Inertia Explained,   #>       * denotes terminal node #>  #> 1) root 39 8453.2190 0.7072663    #>   2) Jul 15  885.3640 0.8431711    #>     4) Aug 8  311.7792   * #>     5) Aug 7  178.8687   * #>   3) Jul 24 1589.1780 0.7964770    #>     6) Jul 13  463.8466   * #>     7) Jul 11  371.2143   * #>  #> Note: One or more of the splits chosen had an alternative split that reduced inertia by the same amount. See \"alt\" column of \"frame\" object for details. plot(PULS4_pam) ggwave(toclust.fd = yfd$fd, intervals = intervals, puls = PULS4_pam)"},{"path":"https://vinhtantran.github.io/puls/reference/PULS.html","id":null,"dir":"Reference","previous_headings":"","what":"Partitioning Using Local Subregions (PULS) — PULS","title":"Partitioning Using Local Subregions (PULS) — PULS","text":"PULS function functional data (used know data converted functional already smooth, e.g. data step function)","code":""},{"path":"https://vinhtantran.github.io/puls/reference/PULS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partitioning Using Local Subregions (PULS) — PULS","text":"","code":"PULS(   toclust.fd,   method = c(\"pam\", \"ward\"),   intervals = c(0, 1),   spliton = NULL,   distmethod = c(\"usc\", \"manual\"),   labels = toclust.fd$fdnames[2]$reps,   nclusters = length(toclust.fd$fdnames[2]$reps),   minbucket = 2,   minsplit = 4 )"},{"path":"https://vinhtantran.github.io/puls/reference/PULS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partitioning Using Local Subregions (PULS) — PULS","text":"toclust.fd functional data object (.e., class fd) created fda package. See fda::fd(). method clustering method want run subregion. Can chosen pam ward. intervals data set (matrix) rows intervals columns beginning ending indexes interval. spliton Restrict partitioning specific set subregions. distmethod method calculating distance matrix. Choose \"usc\" \"manual\". \"usc\" uses fda.usc::metric.lp() function \"manual\" uses squared distance functions. See Details. labels name entities. nclusters number clusters. minbucket minimum number data points one cluster allowed. minsplit minimum size cluster can still considered split candidate.","code":""},{"path":"https://vinhtantran.github.io/puls/reference/PULS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partitioning Using Local Subregions (PULS) — PULS","text":"PULS object. See PULS.object details.","code":""},{"path":"https://vinhtantran.github.io/puls/reference/PULS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Partitioning Using Local Subregions (PULS) — PULS","text":"choosing distmethod = \"manual\", L2 distance pairs functions \\(y_i(t)\\) \\(y_j(t)\\) given : $$d_R(y_i, y_j) = \\sqrt{\\int_{a_r}^{b_r} [y_i(t) - y_j(t)]^2 dt}.$$","code":""},{"path":[]},{"path":"https://vinhtantran.github.io/puls/reference/PULS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Partitioning Using Local Subregions (PULS) — PULS","text":"","code":"# \\donttest{ library(fda) #> Loading required package: splines #> Loading required package: fds #> Loading required package: rainbow #> Loading required package: MASS #> Loading required package: pcaPP #> Loading required package: RCurl #> Loading required package: deSolve #>  #> Attaching package: ‘fda’ #> The following object is masked from ‘package:graphics’: #>  #>     matplot #> The following object is masked from ‘package:datasets’: #>  #>     gait  # Build a simple fd object from already smoothed smoothed_arctic data(smoothed_arctic) NBASIS <- 300 NORDER <- 4 y <- t(as.matrix(smoothed_arctic[, -1])) splinebasis <- create.bspline.basis(rangeval = c(1, 365),                                     nbasis = NBASIS,                                     norder = NORDER) fdParobj <- fdPar(fdobj = splinebasis,                   Lfdobj = 2,                   # No need for any more smoothing                   lambda = .000001) yfd <- smooth.basis(argvals = 1:365, y = y, fdParobj = fdParobj)  Jan <- c(1, 31); Feb <- c(31, 59); Mar <- c(59, 90) Apr <- c(90, 120); May <- c(120, 151); Jun <- c(151, 181) Jul <- c(181, 212); Aug <- c(212, 243); Sep <- c(243, 273) Oct <- c(273, 304); Nov <- c(304, 334); Dec <- c(334, 365)  intervals <-   rbind(Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec)  PULS4_pam <- PULS(toclust.fd = yfd$fd, intervals = intervals,                   nclusters = 4, method = \"pam\") PULS4_pam #> n = 39  #>  #> Node) Split, N, Cluster Inertia, Proportion Inertia Explained,   #>       * denotes terminal node #>  #> 1) root 39 8453.2190 0.7072663    #>   2) Jul 15  885.3640 0.8431711    #>     4) Aug 8  311.7792   * #>     5) Aug 7  178.8687   * #>   3) Jul 24 1589.1780 0.7964770    #>     6) Jul 13  463.8466   * #>     7) Jul 11  371.2143   * #>  #> Note: One or more of the splits chosen had an alternative split that reduced inertia by the same amount. See \"alt\" column of \"frame\" object for details. # }"},{"path":"https://vinhtantran.github.io/puls/reference/PULS.object.html","id":null,"dir":"Reference","previous_headings":"","what":"PULS Tree Object — PULS.object","title":"PULS Tree Object — PULS.object","text":"structure objects contained PULS, object returned PULS() function used input functions package.","code":""},{"path":"https://vinhtantran.github.io/puls/reference/PULS.object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PULS Tree Object — PULS.object","text":"frame Data frame form tibble::tibble() representing tree structure one row node. columns include: number Index node. Depth node can derived number %/% 2. var Name variable used split node \"<leaf>\" leaf node. n Cluster size, number observations cluster. wt Weights observations. Unusable. Saved future use. inertia Inertia value cluster node. bipartsplitrow Position next split row data set (position belong left node (smaller)). bipartsplitcol Position next split variable data set. inertiadel Proportion inertia value cluster node inertia root. medoid Position data point regarded medoid cluster. loc y-coordinate splitting node facilitate showing tree. See plot.PULS() details. inertia_explained Percent inertia explained described Chavent (2007). 1 - (sum(current inertia)/inertial[1]). alt Indicator alternative cut yielding reduction inertia split. membership Vector length number rows data, containing value frame$number corresponding leaf node observation falls . dist Distance matrix calculated using method indicated distmethod argument PULS(). terms Vector subregion names data used split. medoids Named vector positions data points regarded medoids clusters. alt Indicator alternate splitting route occurred splitting.","code":""},{"path":"https://vinhtantran.github.io/puls/reference/PULS.object.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PULS Tree Object — PULS.object","text":"Chavent, M., Lechevallier, Y., & Briant, O. (2007). DIVCLUS-T: monothetic divisive hierarchical clustering method. Computational Statistics & Data Analysis, 52(2), 687-701. doi:10.1016/j.csda.2007.03.013 .","code":""},{"path":[]},{"path":"https://vinhtantran.github.io/puls/reference/arctic_2019.html","id":null,"dir":"Reference","previous_headings":"","what":"NOAA's Arctic Sea Daily Ice Extend Data — arctic_2019","title":"NOAA's Arctic Sea Daily Ice Extend Data — arctic_2019","text":"data set containing daily ice extent Arctic Sea 1978 2019, collected National Oceanic Atmospheric Administration (NOAA)","code":""},{"path":"https://vinhtantran.github.io/puls/reference/arctic_2019.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NOAA's Arctic Sea Daily Ice Extend Data — arctic_2019","text":"","code":"arctic_2019"},{"path":"https://vinhtantran.github.io/puls/reference/arctic_2019.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NOAA's Arctic Sea Daily Ice Extend Data — arctic_2019","text":"data frame 13391 rows 6 variables: Year Years available data (1978–2019). Month Month (01–12). Day Day month indicated Column Month. Extent Daily ice extent, three decimal places. Missing Whether day missing (1) (0)). Source Data data source NOAA database.","code":""},{"path":"https://vinhtantran.github.io/puls/reference/arctic_2019.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"NOAA's Arctic Sea Daily Ice Extend Data — arctic_2019","text":"https://nsidc.org/data/G02135/versions/3","code":""},{"path":"https://vinhtantran.github.io/puls/reference/arctic_2019.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NOAA's Arctic Sea Daily Ice Extend Data — arctic_2019","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following object is masked from ‘package:MASS’: #>  #>     select #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(lubridate) #>  #> Attaching package: ‘lubridate’ #> The following objects are masked from ‘package:base’: #>  #>     date, intersect, setdiff, union library(ggplot2)  data(arctic_2019)  # Create day in the year column to replace Month and Day north <-   arctic_2019 %>%   mutate(yday = yday(make_date(Year, Month, Day)),          .keep = \"all\") %>%   select(Year, yday, Extent)  ggplot(north) +   geom_linerange(aes(x = yday, ymin = Year - 0.2, ymax = Year + 0.2),                  size = 0.5, color = \"red\") +   scale_y_continuous(breaks = seq(1980, 2020, by = 5),                      minor_breaks = NULL) +   labs(x = \"Day\",        y = \"Year\",        title = \"Measurement frequencies were not always the same\") #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead."},{"path":"https://vinhtantran.github.io/puls/reference/as_MonoClust.PULS.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce a PULS Object to MonoClust Object — as_MonoClust.PULS","title":"Coerce a PULS Object to MonoClust Object — as_MonoClust.PULS","text":"implementation monoClust::as_MonoClust() S3 method PULS object. purpose reuse plotting printing functions monoClust package.","code":""},{"path":"https://vinhtantran.github.io/puls/reference/as_MonoClust.PULS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a PULS Object to MonoClust Object — as_MonoClust.PULS","text":"","code":"# S3 method for class 'PULS' as_MonoClust(x, ...)"},{"path":"https://vinhtantran.github.io/puls/reference/as_MonoClust.PULS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a PULS Object to MonoClust Object — as_MonoClust.PULS","text":"x PULS object coerced MonoClust object. ... extensibility.","code":""},{"path":"https://vinhtantran.github.io/puls/reference/as_MonoClust.PULS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a PULS Object to MonoClust Object — as_MonoClust.PULS","text":"MonoClust object coerced PULS object.","code":""},{"path":[]},{"path":"https://vinhtantran.github.io/puls/reference/checkem.html","id":null,"dir":"Reference","previous_headings":"","what":"First Gate Function — checkem","title":"First Gate Function — checkem","text":"function checks available nodes split call find_split() node, decide node creates best split, call splitter() perform split.","code":""},{"path":"https://vinhtantran.github.io/puls/reference/checkem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"First Gate Function — checkem","text":"","code":"checkem(   toclust.fd,   frame,   cloc,   dist,   dsubs,   dsubsname,   weights,   minbucket,   minsplit,   spliton,   method )"},{"path":"https://vinhtantran.github.io/puls/reference/checkem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"First Gate Function — checkem","text":"toclust.fd functional data object (.e., class fd) created fda package. See fda::fd(). frame split tree transferred data frame. cloc Vector current cluster membership. dist Distance matrix observations data. dsubs Distance matrix calculated subregion. three-dimensional matrix. dsubsname Subregion names. weights (Currently unused) Weights observations. minbucket minimum number data points one cluster allowed. minsplit minimum number observations must exist node order split attempted. spliton Restrict partitioning specific set subregions. method clustering method want run subregion. Can chosen pam ward.","code":""},{"path":"https://vinhtantran.github.io/puls/reference/checkem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"First Gate Function — checkem","text":"supposed return anything global environment used. However, nothing left split, returns 0 tell caller stop running loop.","code":""},{"path":"https://vinhtantran.github.io/puls/reference/fdistmatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance Between Functional Objects — fdistmatrix","title":"Distance Between Functional Objects — fdistmatrix","text":"Calculate distance functional objects defined range.","code":""},{"path":"https://vinhtantran.github.io/puls/reference/fdistmatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance Between Functional Objects — fdistmatrix","text":"","code":"fdistmatrix(fd, subrange, distmethod)"},{"path":"https://vinhtantran.github.io/puls/reference/fdistmatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance Between Functional Objects — fdistmatrix","text":"fd functional data object fd fda package. subrange vector two values indicating value range functional object calculate . distmethod method calculating distance matrix. Choose \"usc\" \"manual\". \"usc\" uses fda.usc::metric.lp() function \"manual\" uses squared distance functions. See Details.","code":""},{"path":"https://vinhtantran.github.io/puls/reference/fdistmatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance Between Functional Objects — fdistmatrix","text":"distance matrix diagonal value upper half.","code":""},{"path":"https://vinhtantran.github.io/puls/reference/fdistmatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distance Between Functional Objects — fdistmatrix","text":"choosing distmethod = \"manual\", L2 distance pairs functions \\(y_i(t)\\) \\(y_j(t)\\) given : $$d_R(y_i, y_j) = \\sqrt{\\int_{a_r}^{b_r} [y_i(t) - y_j(t)]^2 dt}.$$","code":""},{"path":"https://vinhtantran.github.io/puls/reference/fdistmatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance Between Functional Objects — fdistmatrix","text":"","code":"library(fda) # Examples taken from fda::Data2fd() data(gait) # Function only works on two dimensional data gait <- gait[, 1:5, 1] gaitbasis3 <- create.fourier.basis(nbasis = 5) gaitfd3 <- Data2fd(gait, basisobj = gaitbasis3) #> 'y' is missing, using 'argvals' #> 'argvals' is missing;  using seq( 0 ,  1 , length= 20 )  fdistmatrix(gaitfd3, c(0.2, 0.4), \"usc\") #>          boy1     boy2     boy3     boy4     boy5 #> boy1 0.000000 1.508725 2.702666 2.959672 6.555149 #> boy2 1.508725 0.000000 2.089777 3.740105 7.326595 #> boy3 2.702666 2.089777 0.000000 5.570693 9.180862 #> boy4 2.959672 3.740105 5.570693 0.000000 3.643998 #> boy5 6.555149 7.326595 9.180862 3.643998 0.000000"},{"path":"https://vinhtantran.github.io/puls/reference/find_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Best Split — find_split","title":"Find the Best Split — find_split","text":"Find best split terms reduction inertia transferred node, indicate row. Find terminal node greatest change inertia bi-partition .","code":""},{"path":"https://vinhtantran.github.io/puls/reference/find_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the Best Split — find_split","text":"","code":"find_split(   toclust.fd,   frame_row,   cloc,   dist,   dsubs,   dsubsname,   weights,   minbucket,   minsplit,   spliton,   method )"},{"path":"https://vinhtantran.github.io/puls/reference/find_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the Best Split — find_split","text":"toclust.fd functional data object (.e., class fd) created fda package. See fda::fd(). frame_row One row split tree data frame. cloc Vector current cluster membership. dist Distance matrix observations data. dsubs Distance matrix calculated subregion. three-dimensional matrix. dsubsname Subregion names. weights (Currently unused) Weights observations. minbucket minimum number data points one cluster allowed. minsplit minimum number observations must exist node order split attempted. spliton Restrict partitioning specific set subregions. method clustering method want run subregion. Can chosen pam ward.","code":""},{"path":"https://vinhtantran.github.io/puls/reference/find_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the Best Split — find_split","text":"updated frame_row next split updated.","code":""},{"path":"https://vinhtantran.github.io/puls/reference/ggwave.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the Partitioned Functional Wave by PULS — ggwave","title":"Plot the Partitioned Functional Wave by PULS — ggwave","text":"partitioning using PULS, function can plot functional waves color different clusters well medoids.","code":""},{"path":"https://vinhtantran.github.io/puls/reference/ggwave.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the Partitioned Functional Wave by PULS — ggwave","text":"","code":"ggwave(   toclust.fd,   intervals,   puls.obj,   xlab = NULL,   ylab = NULL,   lwd = 0.5,   alpha = 0.4,   lwd.med = 1 )"},{"path":"https://vinhtantran.github.io/puls/reference/ggwave.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the Partitioned Functional Wave by PULS — ggwave","text":"toclust.fd functional data object (.e., class fd) created fda package. See fda::fd(). intervals data set (matrix) rows intervals columns beginning ending indexes interval. puls.obj PULS object result PULS(). xlab Labels x-axis. provided, labels stored fd object used. ylab Labels y-axis.  provided, labels stored fd object used. lwd Linewidth normal waves. alpha Transparency normal waves. lwd.med Linewidth medoid waves.","code":""},{"path":"https://vinhtantran.github.io/puls/reference/ggwave.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the Partitioned Functional Wave by PULS — ggwave","text":"ggplot2 object.","code":""},{"path":"https://vinhtantran.github.io/puls/reference/ggwave.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the Partitioned Functional Wave by PULS — ggwave","text":"","code":"# \\donttest{ library(fda)  # Build a simple fd object from already smoothed smoothed_arctic data(smoothed_arctic) NBASIS <- 300 NORDER <- 4 y <- t(as.matrix(smoothed_arctic[, -1])) splinebasis <- create.bspline.basis(rangeval = c(1, 365),                                     nbasis = NBASIS,                                     norder = NORDER) fdParobj <- fdPar(fdobj = splinebasis,                   Lfdobj = 2,                   # No need for any more smoothing                   lambda = .000001) yfd <- smooth.basis(argvals = 1:365, y = y, fdParobj = fdParobj)  Jan <- c(1, 31); Feb <- c(31, 59); Mar <- c(59, 90) Apr <- c(90, 120); May <- c(120, 151); Jun <- c(151, 181) Jul <- c(181, 212); Aug <- c(212, 243); Sep <- c(243, 273) Oct <- c(273, 304); Nov <- c(304, 334); Dec <- c(334, 365)  intervals <-   rbind(Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec)  PULS4_pam <- PULS(toclust.fd = yfd$fd, intervals = intervals,                   nclusters = 4, method = \"pam\") ggwave(toclust.fd = yfd$fd, intervals = intervals, puls = PULS4_pam)  # }"},{"path":"https://vinhtantran.github.io/puls/reference/plot.PULS.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot PULS Splitting Rule Tree — plot.PULS","title":"Plot PULS Splitting Rule Tree — plot.PULS","text":"Print PULS tree form dendrogram.","code":""},{"path":"https://vinhtantran.github.io/puls/reference/plot.PULS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot PULS Splitting Rule Tree — plot.PULS","text":"","code":"# S3 method for class 'PULS' plot(   x,   branch = 1,   margin = c(0.12, 0.02, 0, 0.05),   text = TRUE,   which = 4,   digits = getOption(\"digits\") - 2,   cols = NULL,   col.type = c(\"l\", \"p\", \"b\"),   ... )"},{"path":"https://vinhtantran.github.io/puls/reference/plot.PULS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot PULS Splitting Rule Tree — plot.PULS","text":"x PULS object. branch Controls shape branches parent child node. number 0 1 allowed. value 1 gives square shouldered branches, value 0 give V shaped branches, values intermediate. margin extra fraction white space leave around borders tree. (Long labels sometimes get cut default computation). text Whether print labels tree. Labeling modes, : 1: splitting variable names shown, splitting rules. 2: splitting rules left branches shown. 3: splitting rules right branches shown. 4 (default): splitting rules shown sides branches. digits Number significant digits print. cols Whether shown color bars leaves . helps matching tree plot plots whose cluster membership colored. works text TRUE. Either NULL, vector one color, vector colors matching number leaves. col.type cols set, choose whether color indicators shown form solid lines leaves (\"l\"), big points (\"p\"), (\"b\"). ... Arguments passed monoClust::plot.MonoClust().","code":""},{"path":"https://vinhtantran.github.io/puls/reference/plot.PULS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot PULS Splitting Rule Tree — plot.PULS","text":"plot splitting order.","code":""},{"path":"https://vinhtantran.github.io/puls/reference/plot.PULS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot PULS Splitting Rule Tree — plot.PULS","text":"","code":"# \\donttest{ library(fda)  # Build a simple fd object from already smoothed smoothed_arctic data(smoothed_arctic) NBASIS <- 300 NORDER <- 4 y <- t(as.matrix(smoothed_arctic[, -1])) splinebasis <- create.bspline.basis(rangeval = c(1, 365),                                     nbasis = NBASIS,                                     norder = NORDER) fdParobj <- fdPar(fdobj = splinebasis,                   Lfdobj = 2,                   # No need for any more smoothing                   lambda = .000001) yfd <- smooth.basis(argvals = 1:365, y = y, fdParobj = fdParobj)  Jan <- c(1, 31); Feb <- c(31, 59); Mar <- c(59, 90) Apr <- c(90, 120); May <- c(120, 151); Jun <- c(151, 181) Jul <- c(181, 212); Aug <- c(212, 243); Sep <- c(243, 273) Oct <- c(273, 304); Nov <- c(304, 334); Dec <- c(334, 365)  intervals <-   rbind(Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec)  PULS4_pam <- PULS(toclust.fd = yfd$fd, intervals = intervals,                   nclusters = 4, method = \"pam\") plot(PULS4_pam)  # }"},{"path":"https://vinhtantran.github.io/puls/reference/print.PULS.html","id":null,"dir":"Reference","previous_headings":"","what":"Print PULS Clustering Result — print.PULS","title":"Print PULS Clustering Result — print.PULS","text":"Render PULS split tree easy read format important information terminal nodes, etc.","code":""},{"path":"https://vinhtantran.github.io/puls/reference/print.PULS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print PULS Clustering Result — print.PULS","text":"","code":"# S3 method for class 'PULS' print(x, spaces = 2L, digits = getOption(\"digits\"), ...)"},{"path":"https://vinhtantran.github.io/puls/reference/print.PULS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print PULS Clustering Result — print.PULS","text":"x PULS result object. spaces Spaces indent 2 tree levels. digits Number significant digits print. ... Arguments passed monoClust::print.MonoClust().","code":""},{"path":"https://vinhtantran.github.io/puls/reference/print.PULS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print PULS Clustering Result — print.PULS","text":"nicely displayed PULS split tree text.","code":""},{"path":"https://vinhtantran.github.io/puls/reference/print.PULS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print PULS Clustering Result — print.PULS","text":"","code":"# \\donttest{ library(fda)  # Build a simple fd object from already smoothed smoothed_arctic data(smoothed_arctic) NBASIS <- 300 NORDER <- 4 y <- t(as.matrix(smoothed_arctic[, -1])) splinebasis <- create.bspline.basis(rangeval = c(1, 365),                                     nbasis = NBASIS,                                     norder = NORDER) fdParobj <- fdPar(fdobj = splinebasis,                   Lfdobj = 2,                   # No need for any more smoothing                   lambda = .000001) yfd <- smooth.basis(argvals = 1:365, y = y, fdParobj = fdParobj)  Jan <- c(1, 31); Feb <- c(31, 59); Mar <- c(59, 90) Apr <- c(90, 120); May <- c(120, 151); Jun <- c(151, 181) Jul <- c(181, 212); Aug <- c(212, 243); Sep <- c(243, 273) Oct <- c(273, 304); Nov <- c(304, 334); Dec <- c(334, 365)  intervals <-   rbind(Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec)  PULS4_pam <- PULS(toclust.fd = yfd$fd, intervals = intervals,                   nclusters = 4, method = \"pam\") print(PULS4_pam) #> n = 39  #>  #> Node) Split, N, Cluster Inertia, Proportion Inertia Explained,   #>       * denotes terminal node #>  #> 1) root 39 8453.2190 0.7072663    #>   2) Jul 15  885.3640 0.8431711    #>     4) Aug 8  311.7792   * #>     5) Aug 7  178.8687   * #>   3) Jul 24 1589.1780 0.7964770    #>     6) Jul 13  463.8466   * #>     7) Jul 11  371.2143   * #>  #> Note: One or more of the splits chosen had an alternative split that reduced inertia by the same amount. See \"alt\" column of \"frame\" object for details. # }"},{"path":"https://vinhtantran.github.io/puls/reference/puls-package.html","id":null,"dir":"Reference","previous_headings":"","what":"puls: Partitioning Using Local Subregions — puls-package","title":"puls: Partitioning Using Local Subregions — puls-package","text":"method clustering functional data using subregion information curves. intended supplement 'fda' 'fda.usc' packages functional data object clustering. also facilitates printing plotting results tree format limits partitioning candidates specific set subregions.","code":""},{"path":[]},{"path":"https://vinhtantran.github.io/puls/reference/puls-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"puls: Partitioning Using Local Subregions — puls-package","text":"Maintainer: Tan Tran vinhtantran@gmail.com (ORCID) Authors: Mark Greenwood greenwood@montana.edu (ORCID)","code":""},{"path":"https://vinhtantran.github.io/puls/reference/smoothed_arctic.html","id":null,"dir":"Reference","previous_headings":"","what":"Discrete Form of Smoothed Functional Form of Arctic Data — smoothed_arctic","title":"Discrete Form of Smoothed Functional Form of Arctic Data — smoothed_arctic","text":"Raw Arctic data smoothed transformed functional data using fda package. overcome difficulty exporting fda object package, object discretized data set 365 columns corresponding 365 days year 39 rows corresponding 39 years. years 1979 1986, 1989 2018. years 1978, 1987, 1988 removed measurements complete.","code":""},{"path":"https://vinhtantran.github.io/puls/reference/smoothed_arctic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discrete Form of Smoothed Functional Form of Arctic Data — smoothed_arctic","text":"","code":"smoothed_arctic"},{"path":"https://vinhtantran.github.io/puls/reference/smoothed_arctic.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Discrete Form of Smoothed Functional Form of Arctic Data — smoothed_arctic","text":"data frame 39 rows corresponding 39 years (1979 1986, 1989 2019) 366 columns.","code":""},{"path":[]},{"path":"https://vinhtantran.github.io/puls/reference/splitter.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Function — splitter","title":"Split Function — splitter","text":"Given Cluster's frame's row position split split_row, function performs split, calculate necessary information splitting tree cluster memberships.","code":""},{"path":"https://vinhtantran.github.io/puls/reference/splitter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Function — splitter","text":"","code":"splitter(   toclust.fd,   split_row,   frame,   cloc,   dist,   dsubs,   dsubsname,   weights,   method )"},{"path":"https://vinhtantran.github.io/puls/reference/splitter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Function — splitter","text":"toclust.fd functional data object (.e., class fd) created fda package. See fda::fd(). split_row row index frame split . frame split tree transferred data frame. cloc Vector current cluster membership. dist Distance matrix observations data. dsubs Distance matrix calculated subregion. three-dimensional matrix. dsubsname Subregion names. weights (Currently unused) Weights observations. method clustering method want run subregion. Can chosen pam ward.","code":""},{"path":"https://vinhtantran.github.io/puls/reference/splitter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split Function — splitter","text":"Updated frame cloc saved list.","code":""},{"path":[]},{"path":"https://vinhtantran.github.io/puls/news/index.html","id":"puls-012","dir":"Changelog","previous_headings":"","what":"puls 0.1.2","title":"puls 0.1.2","text":"CRAN release: 2021-02-16 Remove unit test as_MonoClust() regarding warning message monoClust.","code":""},{"path":"https://vinhtantran.github.io/puls/news/index.html","id":"puls-011","dir":"Changelog","previous_headings":"","what":"puls 0.1.1","title":"puls 0.1.1","text":"CRAN release: 2020-12-09 Remove unused packages Imports.","code":""},{"path":"https://vinhtantran.github.io/puls/news/index.html","id":"puls-010","dir":"Changelog","previous_headings":"","what":"puls 0.1.0","title":"puls 0.1.0","text":"CRAN release: 2020-12-02 Initial release","code":""}]
